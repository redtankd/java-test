buildscript {
    dependencies {
        classpath "org.xtext:xtext-gradle-plugin:1.0.5"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
    }

    repositories {
        mavenCentral()
        jcenter()
    }
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

task clean {
    delete "${buildDir}"
}

repositories {
    mavenCentral()
    jcenter()
}

/////////////////////////////////////////////////////////////////////
// java projects: common configuration

subprojects {
    apply plugin: 'java'

    apply plugin: 'eclipse'
    apply plugin: 'idea'

    apply plugin: 'jacoco'

    dependencies {
        // log system
        def slf4jVersion = '1.7.21'
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
        compile "org.slf4j:jul-to-slf4j:${slf4jVersion}"
        compile "ch.qos.logback:logback-classic:1.1.7"
        compile "org.codehaus.janino:janino:2.7.8"

        testCompile "junit:junit:4.12"
    }

    configurations {
        // *. is groovy's spread operator
        all*.exclude module: "commons-logging"
        all*.exclude module: "log4j"
        all*.exclude module: "mina-core"
    }

    sourceSets.main.resources.srcDir 'src/main/java' 
    sourceSets.test.resources.srcDir 'src/test/java' 

    eclipseJdt << {
        File f1 = file('.settings/org.eclipse.core.resources.prefs')
        f1.write('eclipse.preferences.version=1\n')
        f1.append('encoding/<project>=utf-8')

        File f2 = file('.settings/org.eclipse.core.runtime.prefs')
        f2.write('eclipse.preferences.version=1\n')
        f2.append('line.separator=\\n')
    }

    repositories {
        mavenCentral()
        jcenter()
    }
}

/////////////////////////////////////////////////////////////////////
// java projects: xtend configuration

configure(subprojects.findAll { 
    it.path != ":java8" &&
    file(it.rootDir.getPath() + "/build.gradle").exists()
}) {
    apply plugin: "org.xtext.xtend"

    xtend {
        debugger {
            sourceInstaller = 'PRIMARY'
            hideSyntheticVariables = true
        }
    }

    dependencies {
        compile "org.eclipse.xtend:org.eclipse.xtend.lib:2.9.2"
    }
}

/////////////////////////////////////////////////////////////////////
// java projects: the java dependencies management

ext.jSpringVersion    = '4.2.5.RELEASE'
ext.jSpringIntVersion = '4.2.5.RELEASE'
ext.jJettyVersion     = '9.3.8.v20160314'

ext.jDeps = [ // Groovy map literal
    // spring
    springContext: "org.springframework:spring-context:$jSpringVersion",
    springJdbc:    "org.springframework:spring-jdbc:$jSpringVersion",
    springWebmvc:  "org.springframework:spring-webmvc:$jSpringVersion",
    springTest:    "org.springframework:spring-test:$jSpringVersion",
    springInt:     "org.springframework.integration:spring-integration-core:$jSpringIntVersion",
    springIntDsl:  "org.springframework.integration:spring-integration-java-dsl:1.1.2.RELEASE",
    springBoot:    "org.springframework.boot:spring-boot-starter:1.3.3.RELEASE",
    springShell:   "org.springframework.shell:spring-shell:1.1.0.RELEASE",

    // middleware
    activemq:        "org.apache.activemq:activemq-broker:5.13.2",
    jettyServer:     "org.eclipse.jetty:jetty-server:$jJettyVersion",
    jettyServlet:    "org.eclipse.jetty:jetty-servlet:$jJettyVersion",
    jettyWebapp:     "org.eclipse.jetty:jetty-webapp:$jJettyVersion",
    undertowServlet: "io.undertow:undertow-servlet:1.0.2.Final",

    // network
    netty: "io.netty:netty-all:4.0.36.Final",
    sshd:  "org.apache.sshd:sshd-core:1.2.0",

    // util
    asm:             "org.ow2.asm:asm-all:5.0.3",
    commonsConf:     "commons-configuration:commons-configuration:1.10",
    config:          "com.typesafe:config:1.3.0",
    jacksonDatabind: "com.fasterxml.jackson.core:jackson-databind:2.7.3"
]

/////////////////////////////////////////////////////////////////////
// Code Coverage

// Only report code coverage for projects that are published
def publishedProjects = subprojects.findAll { it.path == ':xtend'; true }

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(publishedProjects.test)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    // exclude projects without test result, or jacocoRootReport will skip
    executionData = files(executionData.findAll { it.exists() })

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    // coveralls.sourceDirs is the dirs that coverall scans
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()

    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' }
}